name: 'builds container images'
description: 'builds container images for backup scripts'

inputs:
  github_token:
    description: 'GitHub Token'
    required: true

  image_tag:
    description: 'image tag, if empty, will be generated from branch or tag'
    default: ''

  cachix_enabled:
    description: "cachix enabled"
    default: "false"

  cachix_cache_name:
    description: "cachix cache name"
    default: "kloudlite"

  cachix_auth_token:
    description: "cachix auth token"

  docker_enabled:
    description: "dokcer enabled"
    default: "false"

  git_directory:
    description: 'git directory'
    default: "."

  # Backup Scripts docker builds
  etcd:
    description: 'builds etcd backup script image'
    default: false

  mongodb:
    description: 'builds mongodb backup script image'
    default: false

  nats:
    description: 'builds nats backup script image'
    default: false

runs:
  using: 'composite'
  steps:
    - name: setup ENV Variables
      shell: bash
      id: env-vars
      working-directory: ${{ inputs.git_directory }}
      run: |+
        echo "PUSH_IMAGE=false" >> $GITHUB_ENV
        if [ "$(basename ${{ inputs.git_directory }})" != "." ]; then
          echo "IMAGE_REPOSITORY_PREFIX=ghcr.io/${{ github.repository }}/$(basename ${{inputs.git_directory}})" >> $GITHUB_ENV
        else
          echo "IMAGE_REPOSITORY_PREFIX=ghcr.io/${{ github.repository }}" >> $GITHUB_ENV
        fi

    - name: ensures path to setup action exists
      shell: bash
      run: |+
        ln -sf ${{ inputs.git_directory }}/.github/actions ./github-actions

    - name: setup nix (with cachix)
      if: ${{ inputs.cachix_enabled == 'true' }}
      uses: ./github-actions/setup-nix-cachix/
      with:
        flake_lock: ${{ inputs.git_directory }}/flake.lock
        nix_develop_arguments: "${{ inputs.git_directory }}#default"

        cachix_cache_name: ${{ inputs.cachix_cache_name }}
        cachix_auth_token: ${{ inputs.cachix_auth_token }}

    - name: setup nix cache (with github cache)
      if: ${{ inputs.cachix_enabled == 'false' }}
      uses: ./github-actions/setup-nix-github/
      with:
        flake_lock: ${{ inputs.git_directory }}/flake.lock
        nix_develop_arguments: "${{ inputs.git_directory }}#default"

    - name: setup docker
      if: ${{ inputs.docker_enabled == 'true' }}
      uses: ./github-actions/setup-docker
      with:
        docker_username: ${{ github.actor }}
        docker_password: ${{ inputs.github_token }}

    - name: check if image needs to be pushed
      if: github.event_name != 'pull_request'
      shell: bash
      run: |+
        echo "PUSH_IMAGE=true" >> $GITHUB_ENV

    - name: Create Image Tag
      if: ${{ inputs.image_tag != '' }}
      shell: bash
      run: |+
        echo "IMAGE_TAG=${{ inputs.image_tag }}" >> $GITHUB_ENV

    - name: Create Image Tag from branch name
      if: ${{ inputs.image_tag == '' && startsWith(github.ref, 'refs/heads/release-') }}
      shell: bash
      run: |
        set +e
        IMAGE_TAG=$(echo ${GITHUB_REF#refs/heads/} | sed 's/release-//g')
        echo "$IMAGE_TAG" | grep -i '\-nightly$'
        if [ $? -ne 0 ]; then
          IMAGE_TAG="$IMAGE_TAG-nightly"
        fi
        set -e

        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Create Image Tag from tag
      if: ${{ inputs.image_tag == '' && startsWith(github.ref, 'refs/tags/') }}
      shell: bash
      run: |
        IMAGE_TAG=$(echo ${GITHUB_REF#refs/tags/})
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: override image if image_tag is nightly
      if: "${{ endsWith(env.IMAGE_TAG, '-nightly') }}"
      shell: bash
      run: |+
        echo "OVERRIDE_PUSHED_IMAGE=true" >> $GITHUB_ENV

    - name: etcd backup script
      if: ${{ inputs.etcd == 'true' }}
      working-directory: ${{ inputs.git_directory }}/k3s-etcd
      shell: bash
      run: |
        task k3s-etcd image={{.IMAGE_REPOSITORY_PREFIX}}/etcd:{{.IMAGE_TAG}}

    - name: mongodb backup script
      if: ${{ inputs.mongodb == 'true' }}
      working-directory: ${{ inputs.git_directory }}/mongodb
      shell: bash
      run: |
        task k3s-etcd image={{.IMAGE_REPOSITORY_PREFIX}}/mongodb:{{.IMAGE_TAG}}

    - name: nats backup script
      if: ${{ inputs.nates == 'true' }}
      working-directory: ${{ inputs.git_directory }}/nats
      shell: bash
      run: |
        task k3s-etcd image={{.IMAGE_REPOSITORY_PREFIX}}/nats:{{.IMAGE_TAG}}
