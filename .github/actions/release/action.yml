name: 'builds container images'
description: 'builds container images for backup scripts'

inputs:
  github_token:
    description: 'GitHub Token'
    required: true

  image_name: 
    description: 'image repository prefix'
    required: true

  image_tag: 
    description: 'image tag'
    required: true

  cachix_cache_name:
    description: "cachix cache name"
    default: ""

  cachix_auth_token:
    description: "cachix auth token"

  docker_enabled:
    description: "dokcer enabled"
    default: "false"

  working_directory:
    description: 'git directory'
    default: "."

  # Backup Scripts docker builds
  etcd:
    description: 'builds etcd backup script image'
    default: false

  mongodb:
    description: 'builds mongodb backup script image'
    default: false

  nats:
    description: 'builds nats backup script image'
    default: false

runs:
  using: 'composite'
  steps:
    - name: setup nix (with cachix)
      uses: kloudlite/actions/setup-nix-cachix@v1
      with:
        flake_lock: ${{ inputs.working_directory }}/flake.lock
        nix_develop_arguments: "${{ inputs.working_directory }}#default"

        cachix_cache_name: ${{ inputs.cachix_cache_name }}
        cachix_auth_token: ${{ inputs.cachix_auth_token }}

    - name: setup docker
      if: ${{ inputs.docker_enabled == 'true' }}
      # uses: nxtcoder17/actions/setup-docker@main
      uses: kloudlite/actions/setup-docker@v1
      with:
        docker_registry: ghcr.io
        docker_username: ${{ github.actor }}
        docker_password: ${{ inputs.github_token }}


    - name: etcd backup script
      if: ${{ inputs.etcd == 'true' }}
      working-directory: ${{ inputs.working_directory }}/k3s-etcd
      shell: bash
      run: |
        task k3s-etcd image=${{ inputs.image_name }}:${{ inputs.image_tag }}

    - name: mongodb backup script
      if: ${{ inputs.mongodb == 'true' }}
      working-directory: ${{ inputs.working_directory }}/mongodb
      shell: bash
      run: |
        task mongodb-backup image=${{ inputs.image_name }}:${{ inputs.image_tag }}

    - name: nats backup script
      if: ${{ inputs.nats == 'true' }}
      working-directory: ${{ inputs.working_directory }}/nats
      shell: bash
      run: |
        task nats-backup image=${{ inputs.image_name }}:${{ inputs.image_tag }}
